NuGetAnalyzerPackage,DiagnosticID,DiagnosticTitle,DiagnosticDescription,DiagnosticDefaultSeverity,DiagnosticCategory
Analyzer1.1.0.0,Analyzer1,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
Analyzer12.1.0.0,Analyzer1,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
AnalyzerFinal2.1.0.0,AnalyzerFinal2,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
AsyncSuffixAnalyzer.1.0.6285.32977,ASA002,Method that does not return some kind of Task should not have name that ends with 'Async' suffix,Method that does not return some kind of Task should not have name that ends with 'Async' suffix,Warning,Naming
CancellationTokenAnalyzers.1.0.1,CTU0001,"CancellationToken available, but not supplied","This method, or an equivalent overload, accepts a CancellationToken, but was not given one, even though an in-scope CancellationToken value was found.",Warning,Usage
CleanCodeHelper.Analyzer.0.0.7,CC0004,Conditionals should be expressed as positives.,,Warning,CleanCode
DSharpAnalyzer.1.1.0,DS02,Method Null Checks,Parameters should be checked for null references,Info,Initialization
DebtRatchet.1.0.5,MethodLengthAnalyzer,Method is too long.,,Warning,Debt
DebtRatchet.1.0.5,TypeLengthAnalyzer,Type is too long.,,Warning,Debt
DebtRatchet.1.0.5,MaxFieldCount,Type has too many fields,,Warning,Debt
Directum.DocumentationChecker.1.0.4,SA1600,Elements should be documented,A C# code element is missing a documentation header.,Error,Directum.Documentation
DotNetAnalyzers.DocumentationAnalyzers.Unstable.1.0.0.59,DOC101,Use child blocks consistently,"The documentation for the element contains some text which is wrapped in block-level elements, and other text which is written inline.",Info,DocumentationAnalyzers.StyleRules
DotNetAnalyzers.DocumentationAnalyzers.Unstable.1.0.0.59,DOC200,Use XML documentation syntax,Use XML documentation syntax,Info,DocumentationAnalyzers.PortabilityRules
DotNetAnalyzers.DocumentationAnalyzers.Unstable.1.0.0.59,DOC201,Item should have description,Item should have description,Info,DocumentationAnalyzers.PortabilityRules
DotNetAnalyzers.DocumentationAnalyzers.Unstable.1.0.0.59,DOC202,Use section elements correctly,Use section elements correctly,Info,DocumentationAnalyzers.PortabilityRules
EqualsMethodAnalyzer.0.1.0,EMA0001,Use == operator instead of Equals method,,Warning,Style
ErrorProne.NET.Structs.0.1.2,EPS01,A struct can be made readonly,Readonly structs have better performance when passed/return by readonly reference.,Warning,Performance
IntelliTect.Analyzers.0.1.8,INTL0201,Async void methods,Async methods must return either Task or Task<T>.,Warning,Reliability
IntelliTect.Analyzers.0.1.8,INTL0002,Properties PascalCase,All properties should be in the format PascalCase,Warning,Naming
LowerChar.1.0.0,LowerChar,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
MalikP.Analyzers.AsyncMethodAnalyzer.0.3.18,AADE003,Asynchronous 'void' method missing 'CancellationToken' parameter,Asynchronous 'void' method should contain 'CancellationToken' parameter.,Info,Design
Microsoft.CodeAnalysis.NetAnalyzers.5.0.3,CA2101,Specify marshaling for P/Invoke string arguments,"A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.",Info,Globalization
Microsoft.CodeAnalysis.NetAnalyzers.5.0.3,CA1028,Enum Storage should be Int32,"An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.",Warning,Design
Microsoft.CodeAnalysis.NetAnalyzers.5.0.3,CA2016,Forward the 'CancellationToken' parameter to methods,"Forward the 'CancellationToken' parameter to methods to ensure the operation cancellation notifications gets properly propagated, or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token.",Info,Reliability
Microsoft.CodeQuality.Analyzers.3.3.2,CA1028,Enum Storage should be Int32,"An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.",Warning,Design
Microsoft.NetCore.Analyzers.3.3.2,CA2016,Forward the 'CancellationToken' parameter to methods that take one,"Forward the 'CancellationToken' parameter to methods that take one to ensure the operation cancellation notifications gets properly propagated, or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token.",Warning,Reliability
Microsoft.NetCore.Analyzers.3.3.2,CA2101,Specify marshaling for P/Invoke string arguments,"A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.",Warning,Globalization
Microsoft.VisualStudio.Threading.Analyzers.16.9.60,VSTHRD103,Call async methods when in an async method,,Warning,Usage
MindTouch.RoslynAnalyzers.1.0.5917.3542,MindTouchMaterializedEnumerableAnalyzer,Unmaterialized collection,All cases of enum should be covered in switch statement,Warning,Performance
MindTouch.RoslynAnalyzers.1.0.5917.3542,MindTouchMaterializedEnumerableAnalyzer,MindTouchMaterializedEnumerableAnalyzer Exception,MindTouchMaterializedEnumerableAnalyzer Exception,Hidden,Performance
NI.CSharp.Analyzers.1.2.8,NI1018,Do not use LINQ query syntax.,,Warning,NationalInstruments
NINNES.RoslynAnalyzers.0.1.3,NES003,The NES CPU cannot perform multiplications directly,Use bit-shifting multiplication or NESMath.Multiply to multiply two numbers with an algorithm that can be run on the NES CPU,Error,NES CPU Limitations
NetFabric.Hyperlinq.Analyzer.2.0.1,HLQ005,Avoid Single() and SingleOrDefault(),Single() and SingleOrDefault() may perform much more iterations to perform unnecessary validation. Use First() or FirstOrDefault() instead.,Warning,Performance
Noria.Common.Roslyn.0.3.5,NA03,As operator usage analyzer,Checks if casting with 'as' won't cause null reference exception,Warning,Code usage
Noria.Common.Roslyn.0.3.5,NA06,Analyzer for view model property refactoring,Enables change of property to support property changed notification.,Info,Code usage
ODS.UnusedCodeAnalyser.1.0.0,ODSUnusedCodeAnalyser,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
OhioBox.Time.Analyzer.1.1.4,DateTimeUsage,Access DateTime is not allowed,,Error,Current time usage
Ophlan.Analyzers.1.0.5702.39502,OphlanAnalyzersOrganizeMembers,Type name contains unorganized members,Members should be organized,Warning,Ophlan
RecordConstructorGenerator.3.3.0,RCNoAssignment,No assignment to a get-only auto-property.,You can generate the record constructor and assignments.,Info,Refactoring
RefactoringEssentials.5.6.0,RECS0033,Convert 'if' to '||' expression,,Info,Common Practices and Code Improvements
RefactoringEssentials.5.6.0,RECS0057,Redundant Where() call with predicate followed by Single(),,Info,Common Practices and Code Improvements
RefactoringEssentials.5.6.0,RECS0116,Replace usages of 'Count()' with call to 'Any()',,Info,Common Practices and Code Improvements
RefactoringEssentials.5.6.0,RECS0085,"When initializing explicitly typed local variable or array type, array creation expression can be replaced with array initializer.",,Warning,Redundancies in Code
RefactoringEssentials.5.6.0,RECS0004,An empty public constructor without parameters is redundant.,,Info,Redundancies in Symbol Declarations
ReflectionIT.Analyzer.3.5.0,RIT0009,Struct must use Fields and not Auto Properties,Struct must use Fields and not Auto Properties,Warning,Common Practices and Code Improvements
RoslynAnalyzers.SA1413.1.0.6607.40893,SA1413,Use trailing comma in multi-line initializers,A multi-line initializer in a C# code file should use a comma on the last line.,Warning,StyleCop.CSharp.MaintainabilityRules
Roslynator.Analyzers.3.1.0,RCS1003,Add braces to if-else (when expression spans over multiple lines).,,Info,Style
Roslynator.Analyzers.3.1.0,RCS1096,Convert 'HasFlag' call to bitwise operation (or vice versa).,,Info,Performance
Roslynator.Analyzers.3.1.0,RCS1234,Duplicate enum value.,,Info,Readability
Roslynator.Analyzers.3.1.0,RCS1173,Use coalesce expression instead of 'if'.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1077,Optimize LINQ method call.,,Info,Performance
Roslynator.Analyzers.3.1.0,RCS1102,Make class static.,,Warning,Design
Roslynator.Analyzers.3.1.0,RCS1171,Simplify lazy initialization.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1084,Use coalesce expression instead of conditional expression.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1139,Add summary element to documentation comment.,,Warning,Maintainability
Roslynator.Analyzers.3.1.0,RCS1214,Unnecessary interpolated string.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1192,Unnecessary usage of verbatim string literal.,,Info,Readability
Roslynator.Analyzers.3.1.0,RCS1058,Use compound assignment.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1089,Use --/++ operator instead of assignment.,,Info,Simplification
Roslynator.Analyzers.3.1.0,RCS1221,Use pattern matching instead of combination of 'as' operator and null check.,,Info,Usage
Roslynator.Analyzers.Unity.2.1.0,RCS1003,Add braces to if-else (when expression spans over multiple lines).,,Info,Style
Roslynator.Analyzers.Unity.2.1.0,RCS1234,Duplicate enum value.,,Info,Readability
Roslynator.Analyzers.Unity.2.1.0,RCS1029,Format binary operator on next line.,,Info,Formatting
Roslynator.Analyzers.Unity.2.1.0,RCS1173,Use coalesce expression instead of if.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1077,Optimize LINQ method call.,,Info,Performance
Roslynator.Analyzers.Unity.2.1.0,RCS1096,Use bitwise operation instead of calling 'HasFlag'.,,Info,Performance
Roslynator.Analyzers.Unity.2.1.0,RCS1102,Make class static.,,Warning,Design
Roslynator.Analyzers.Unity.2.1.0,RCS1171,Simplify lazy initialization.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1084,Use coalesce expression instead of conditional expression.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1139,Add summary element to documentation comment.,,Warning,Maintainability
Roslynator.Analyzers.Unity.2.1.0,RCS1214,Unnecessary interpolated string.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1058,Use compound assignment.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1089,Use --/++ operator instead of assignment.,,Info,Simplification
Roslynator.Analyzers.Unity.2.1.0,RCS1192,Use regular string literal instead of verbatim string literal.,,Info,Readability
Roslynator.Analyzers.Unity.2.1.0,RCS1221,Use pattern matching instead of combination of 'as' operator and null check.,,Info,Usage
SmartAnalyzers.CSharpExtensions.Annotations.3.9.0,CSE006,Expression too complex,,Info,CSharp Extensions
SonarAnalyzer.CSharp.8.20.0.28934,S1172,Unused method parameters should be removed,"Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.",Warning,Major Code Smell
StyleChecker.1.0.27,SpaceBeforeSemicolon,Semicolon is preceded by a white space.,Semicolon should not be preceded by a white space.,Warning,Spacing
StyleChecker.1.0.27,Underscore,The name of local variables must not include underscores.,The name of local variables must not include underscores.,Warning,Naming
StyleChecker.1.0.27,RedundantTypedArrayCreation,Use an implicitly-typed array creation instead of an explicitly-typed one.,Specifying the explicit type of the array creation is redundant if the type of the array instance is inferred from the elements specified in the array initializer.,Warning,Cleaning
StyleCop.Analyzers.1.1.118,SA1004,Documentation lines should begin with single space,A line within a documentation header above a C# element does not begin with a single space.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.1.1.118,SA1010,Opening square brackets should be spaced correctly,An opening square bracket within a C# statement is not spaced correctly.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.1.1.118,SA1027,Use tabs correctly,The code contains a tab or space character which is not consistent with the current project settings.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.1.1.118,SA1116,Split parameters should start on line after declaration,"The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1120,Comments should contain text,The C# comment does not contain any comment text.,Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1128,Put constructor initializers on their own line,"A constructor initializer, including the colon character, should be on its own line.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1129,Do not use default value type constructor,"When creating a new instance of a value type T, the syntax 'default(T)' is functionally equivalent to the syntax 'new T()'. To avoid confusion regarding the behavior of the resulting instance, the first form is preferred.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1132,Do not combine fields,"Each field should be declared on its own line, in order to clearly see each field of a type and allow for proper documentation of the behavior of each field.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1303,Const field names should begin with upper-case letter,The name of a constant C# field should begin with an upper-case letter.,Warning,StyleCop.CSharp.NamingRules
StyleCop.Analyzers.1.1.118,SA1308,Variable names should not be prefixed,"A field name in C# is prefixed with 'm_', 's_', or 't_'.",Warning,StyleCop.CSharp.NamingRules
StyleCop.Analyzers.1.1.118,SA1119,Statement should not use unnecessary parenthesis,A C# statement contains parenthesis which are unnecessary and should be removed.,Warning,StyleCop.CSharp.MaintainabilityRules
StyleCop.Analyzers.1.1.118,SA1407,Arithmetic expressions should declare precedence,A C# statement contains a complex arithmetic expression which omits parenthesis around operators.,Warning,StyleCop.CSharp.MaintainabilityRules
StyleCop.Analyzers.1.1.118,SA1413,Use trailing comma in multi-line initializers,A multi-line initializer in a C# code file should use a comma on the last line.,Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.1.1.118,SA1502,Element should not be on a single line,A C# element containing opening and closing braces is written completely on a single line.,Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.1.1.118,SA1504,All accessors should be single-line or multi-line,"Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.",Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.1.1.118,SA1519,Braces should not be omitted from multi-line child statement,The opening and closing braces for a multi-line C# statement have been omitted.,Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.1.1.118,SA1207,Protected should come before internal,The keyword '{0}' is positioned after the keyword '{1}' within the declaration of a {0} {1} C# element.,Warning,StyleCop.CSharp.OrderingRules
StyleCop.Analyzers.1.1.118,SA1600,Elements should be documented,A C# code element is missing a documentation header.,Warning,StyleCop.CSharp.DocumentationRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1004,Documentation lines should begin with single space,A line within a documentation header above a C# element does not begin with a single space.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1010,Opening square brackets should be spaced correctly,An opening square bracket within a C# statement is not spaced correctly.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1027,Use tabs correctly,The code contains a tab or space character which is not consistent with the current project settings.,Warning,StyleCop.CSharp.SpacingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1116,Split parameters should start on line after declaration,"The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1120,Comments should contain text,The C# comment does not contain any comment text.,Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1128,Put constructor initializers on their own line,"A constructor initializer, including the colon character, should be on its own line.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1129,Do not use default value type constructor,"When creating a new instance of a value type T, the syntax 'default(T)' is functionally equivalent to the syntax 'new T()'. To avoid confusion regarding the behavior of the resulting instance, the first form is preferred.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1132,Do not combine fields,"Each field should be declared on its own line, in order to clearly see each field of a type and allow for proper documentation of the behavior of each field.",Warning,StyleCop.CSharp.ReadabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1303,Const field names should begin with upper-case letter,The name of a constant C# field should begin with an upper-case letter.,Warning,StyleCop.CSharp.NamingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1308,Variable names should not be prefixed,"A field name in C# is prefixed with 'm_', 's_', or 't_'.",Warning,StyleCop.CSharp.NamingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1119,Statement should not use unnecessary parenthesis,A C# statement contains parenthesis which are unnecessary and should be removed.,Warning,StyleCop.CSharp.MaintainabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1407,Arithmetic expressions should declare precedence,A C# statement contains a complex arithmetic expression which omits parenthesis around operators.,Warning,StyleCop.CSharp.MaintainabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1413,Use trailing comma in multi-line initializers,A multi-line initializer in a C# code file should use a comma on the last line.,Warning,StyleCop.CSharp.MaintainabilityRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1502,Element should not be on a single line,A C# element containing opening and closing braces is written completely on a single line.,Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1504,All accessors should be single-line or multi-line,"Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.",Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1519,Braces should not be omitted from multi-line child statement,The opening and closing braces for a multi-line C# statement have been omitted.,Warning,StyleCop.CSharp.LayoutRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1207,Protected should come before internal,The keyword '{0}' is positioned after the keyword '{1}' within the declaration of a {0} {1} C# element.,Warning,StyleCop.CSharp.OrderingRules
StyleCop.Analyzers.Unstable.1.2.0.333,SA1600,Elements should be documented,A C# code element is missing a documentation header.,Warning,StyleCop.CSharp.DocumentationRules
System.Runtime.InteropServices.Analyzers.1.0.1,CA2101,Specify marshaling for P/Invoke string arguments,"When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.",Warning,Globalization
TestAnalyzer.3.0.0,TestAnalyzer,Type name contains lowercase letters,Type names should be all uppercase.,Warning,Naming
Tocsoft.DateTimeAbstractions.0.1.4,TOCSOFT0002,DateTime static properties are not testable,DateTime static properties are not testable,Warning,Testability
Tocsoft.DateTimeAbstractions.0.1.4,TOCSOFT0001,DateTime static properties are not testable,DateTime static properties are not testable,Warning,Testability
VSDiagnostics.1.10.0,VSD0026,Internal or public fields should be immutable or a property.,,Warning,General
WTG.Analyzers.2.10.4,WTG3002,Prefer direct member access over linq.,Don't use linq extension methods when there is a better alternative.,Info,Decruftification
Wintellect.Analyzers.1.0.6.0,Wintellect002,Always use Debug.Assert methods that have a message parameter,Always use the multiple parameter version of Debug.Assert for better error reporting,Error,Usage
Wintellect.Analyzers.WXF.1.0.7.8,Wintellect002,Always use Debug.Assert methods that have a message parameter,Always use the multiple parameter version of Debug.Assert for better error reporting,Error,Usage
Wintellect.Analyzers.dk.1.0.6,Wintellect002,Always use Debug.Assert methods that have a message parameter,Always use the multiple parameter version of Debug.Assert for better error reporting,Error,Usage
Wintellect.Analyzers.myhx1114.1.0.6,Wintellect002,Always use Debug.Assert methods that have a message parameter,Always use the multiple parameter version of Debug.Assert for better error reporting,Error,Usage
ZWA.Infrastructure.CodeAnalysis.1.0.0,FS0048,Use string interpolation instead of String.Format,String interpolation allows for better reading of the resulting string when compared to String.Format. You should use String.Format only when another method is supplying the format string.,Info,Style
ZWA.Infrastructure.CodeAnalysis.1.0.0,FS0030,Make Local Variable Constant.,This variable is assigned a constant value and never changed it can be made 'const',Info,Performance
ZWA.Infrastructure.CodeAnalysis.1.0.0,FS0011,You should remove the 'Where' invocation when it is possible.,When a linq operator support a predicate parameter it should be used instead of using 'Where' followed by the operator,Warning,Performance
codecracker.CSharp.1.1.0,CC0118,Unnecessary '.ToString()' call in string concatenation.,The runtime automatically calls '.ToString()' method for string concatenation operations when there is no parameters. Remove them.,Info,Style
codecracker.CSharp.1.1.0,CC0048,Use string interpolation instead of String.Format,String interpolation allows for better reading of the resulting string when compared to String.Format. You should use String.Format only when another method is supplying the format string.,Info,Style
codecracker.CSharp.1.1.0,CC0014,Use ternary operator,,Info,Style
codecracker.CSharp.1.1.0,CC0015,Unnecessary Parenthesis,There is no need to specify that the no-parameter constructor is used with  an initializer as it is implicit,Warning,Style
codecracker.CSharp.1.1.0,CC0022,Should dispose object,"When a disposable object is created it should be disposed as soon as possible.
This warning will appear if you create a disposable object and don't store, return or dispose it.",Warning,Usage
codecracker.CSharp.1.1.0,CC0034,Redundant field assignment,It's recommend not to assign the default value to a field as a performance optimization.,Info,Usage
codecracker.CSharp.1.1.0,CC0057,Unused parameters,A method with an unused parameter creates unnecessary confusion and should be deleted.,Warning,Usage
codecracker.CSharp.1.1.0,CC0004,Catch block cannot be empty,An empty catch block suppress all errors and shouldn't be used.\r\nIf the error is expected consider logging it or changing the control flow such that it is explicit.,Warning,Design
